// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id String @id @default(uuid())
  email String @unique
  user_code String @unique @db.VarChar(7)
  first_name String @db.VarChar(50)
  last_name String @db.VarChar(50)
  profile_pic String? @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz

  UserLists UserLists?
  GroupMembers GroupMembers[]
  Items Items[]

  SentInvitations Invitations[] @relation("SentInvitations")
  ReceivedInvitations Invitations[] @relation("ReceivedInvitations")
}

model Groups {
  id Int @id @default(autoincrement())
  group_code String @unique @db.VarChar(7)
  group_name String @db.VarChar(50)
  group_image String? @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime? @updatedAt @db.Timestamptz

  GroupLists GroupLists?
  GroupMembers GroupMembers[]

  Invitations Invitations[]

}

model Lists {
  id Int @id @default(autoincrement())
  expected_total Decimal @db.Decimal(8,2)
  actual_total Decimal @db.Decimal(8,2)
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime? @updatedAt @db.Timestamptz

  UserLists UserLists?
  GroupLists GroupLists?
  Items Items[]
}

model Items {
  id Int @id @default(autoincrement())
  item_name String @db.VarChar(50)
  item_price Decimal? @db.Decimal(8,2)
  item_quantity Int
  item_status ItemStatus @default(NEEDED)
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime? @updatedAt @db.Timestamptz

  list_id Int
  user_id String

  Lists Lists @relation(fields: [list_id], references: [id], onDelete: Cascade)
  Users Users @relation(fields: [user_id], references: [id], onDelete: Cascade)


  @@index([list_id])
}

model Invitations {
  id Int @id @default(autoincrement())
  type InvitationType
  status InvitationStatus @default(PENDING)
  message String? @db.VarChar(255)
  
  from_user_id String
  to_user_id String
  FromUser Users @relation("SentInvitations", fields: [from_user_id], references: [id], onDelete: Cascade)
  ToUser Users @relation("ReceivedInvitations", fields: [to_user_id], references: [id], onDelete: Cascade)
  
  group_id Int?
  Group Groups? @relation(fields: [group_id], references: [id], onDelete: Cascade)
  
  created_at DateTime @default(now()) @db.Timestamptz
  expires_at DateTime? @db.Timestamptz
  responded_at DateTime? @db.Timestamptz
  
  @@index([to_user_id, status])
  @@index([from_user_id])
  @@index([group_id])
  @@index([expires_at])
}


model UserLists {
  user_id String @unique
  list_id Int @unique
  interval_time DateTime @db.Time()
  interval_freq ReminderFrequency
  updated_at DateTime? @db.Timestamptz

  Users Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Lists Lists @relation(fields: [list_id], references: [id], onDelete: Cascade)

  @@id([user_id, list_id])
  @@index([user_id])
  @@index([list_id])
}

model GroupLists {
  group_id Int @unique
  list_id Int @unique
  interval_time DateTime @db.Time()
  interval_freq ReminderFrequency
  updated_at DateTime? @db.Timestamptz
  
  Groups Groups @relation(fields: [group_id], references: [id], onDelete: Cascade)
  Lists Lists @relation(fields: [list_id], references: [id], onDelete: Cascade)

  @@id([group_id, list_id])
  @@index([group_id])
  @@index([list_id])
}

model GroupMembers {
  user_id String
  group_id Int
  joined_at DateTime @default(now()) @db.Timestamptz
  
  Users Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Groups Groups @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@id([user_id, group_id])
  @@index([user_id])
  @@index([group_id])
}

enum ItemStatus {
  NEEDED
  PURCHASED
  OPTIONAL 
} 

enum ReminderFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum InvitationType {
  GROUP_INVITE     
  JOIN_REQUEST    
  START_GROUP      
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
}